# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

from ..hrv import hrv


def scg_intervalrelated(data, sampling_rate=1000):
    """Performs scg analysis on longer periods of data (typically > 10 seconds), such as resting-state data.

    Parameters
    ----------
    data : Union[dict, pd.DataFrame]
        A DataFrame containing the different processed signal(s) as different columns, typically
        generated by `scg_process()` or `bio_process()`. Can also take a dict containing sets of
        separately processed DataFrames.
    sampling_rate : int
        The sampling frequency of the signal (in Hz, i.e., samples/second).

    Returns
    -------
    DataFrame
        A dataframe containing the analyzed scg features. The analyzed features consist of the following:

        - *"scg_Rate_Mean"*: the mean heart rate.

        - *"scg_HRV"*: the different heart rate variability metrices.

        See `hrv_summary()` docstrings for details.

    See Also
    --------
    bio_process, scg_eventrelated

    Examples
    ----------
    >>> import neurokit2 as nk
    >>>
    >>> # Download data
    >>> data = nk.data("bio_resting_5min_100hz")
    >>>
    >>> # Process the data
    >>> df, info = nk.scg_process(data["scg"], sampling_rate=100)
    >>>
    >>> # Single dataframe is passed
    >>> nk.scg_intervalrelated(df, sampling_rate=100) #doctest: +ELLIPSIS
       scg_Rate_Mean  HRV_RMSSD  ...
    0      ...

    [1 rows x 55 columns]
    >>>
    >>> epochs = nk.epochs_create(df, events=[0, 15000], sampling_rate=100,
    ...                           epochs_end=150)
    >>> nk.scg_intervalrelated(epochs) #doctest: +ELLIPSIS
       scg_Rate_Mean  HRV_RMSSD ...
    1      ...

    [2 rows x 55 columns]

    """
    intervals = {}

    # Format input
    if isinstance(data, pd.DataFrame):
        rate_cols = [col for col in data.columns if "scg_Rate" in col]
        if len(rate_cols) == 1:
            intervals.update(_scg_intervalrelated_formatinput(data))
            intervals.update(_scg_intervalrelated_hrv(data, sampling_rate))
        else:
            raise ValueError(
                "NeuroKit error: scg_intervalrelated(): Wrong input,"
                "we couldn't extract heart rate. Please make sure"
                "your DataFrame contains an `scg_Rate` column."
            )
        scg_intervals = pd.DataFrame.from_dict(intervals, orient="index").T

    elif isinstance(data, dict):
        for index in data:
            intervals[index] = {}  # Initialize empty container

            # Format dataframe
            data[index] = data[index].set_index("Index").drop(["Label"], axis=1)

            # Rate
            intervals[index] = _scg_intervalrelated_formatinput(data[index], intervals[index])

            # HRV
            intervals[index] = _scg_intervalrelated_hrv(data[index], sampling_rate, intervals[index])

        scg_intervals = pd.DataFrame.from_dict(intervals, orient="index")

    return scg_intervals


# =============================================================================
# Internals
# =============================================================================


def _scg_intervalrelated_formatinput(data, output={}):

    # Sanitize input
    colnames = data.columns.values
    if len([i for i in colnames if "scg_Rate" in i]) == 0:
        raise ValueError(
            "NeuroKit error: scg_intervalrelated(): Wrong input,"
            "we couldn't extract heart rate. Please make sure"
            "your DataFrame contains an `scg_Rate` column."
        )
    signal = data["scg_Rate"].values
    output["scg_Rate_Mean"] = np.mean(signal)

    return output


def _scg_intervalrelated_hrv(data, sampling_rate, output={}):

    # Sanitize input
    colnames = data.columns.values
    if len([i for i in colnames if "scg_R_Peaks" in i]) == 0:
        raise ValueError(
            "NeuroKit error: scg_intervalrelated(): Wrong input,"
            "we couldn't extract R-peaks. Please make sure"
            "your DataFrame contains an `scg_R_Peaks` column."
        )

    # Transform rpeaks from "signal" format to "info" format.
    rpeaks = np.where(data["scg_R_Peaks"].values)[0]
    rpeaks = {"scg_R_Peaks": rpeaks}

    results = hrv(rpeaks, sampling_rate=sampling_rate)
    for column in results.columns:
        output[column] = float(results[column])

    return output
